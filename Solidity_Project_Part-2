
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

contract MyContract {
    struct Campaign{
address owner;
string title;
string description;
uint256 target;
uint256 deadline;
uint256 amountCollected;
string image;
address[] donator;
address[] donations;
    }
    mapping(uint256=>Campaign) public campaigns;
    uint256 public numberofCampaigns=0;
    function createCampaign(address _owner, string memory _title,string memory _description,uint256 _target,uint256 _deadline,string memory _image) public returns(uint256) {
        campaign storage campaign=campaigns[numberofCampaigns];
        require(campaign.deadline<block.timestamp,"This deadline shoud be a date in the future");
        campaign.owner=_owner;
        campaign.title=_title;
        campaign.description=_description;
        campaign.target=_target;
        campaign.deadline=_deadline;
      campaign.image=_imagek;
        
    }
    function donateToCampaign(uint256 _id) public payable{
        uint256 amount=msg.value;
        campaign storagen campaign = campaigns[id];
        campaign.donators.push(msg.sender);
          campaign.donators.push(amount);
          bool send=payable(campaign.owner).call{value:amount}("");
          if(send){
            campaign.amountCollected=campaign.amountCollected+amount;
          }
    }
    function getDonators() {
        
    }
    function getCampaigns() {
        
    }
}
